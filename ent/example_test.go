// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"log"
	"time"

	"github.com/facebookincubator/ent/dialect/sql"

	"github.com/satriahrh/winslow/ent/sprint"
	"github.com/satriahrh/winslow/ent/story"
)

// dsn for the database. In order to run the tests locally, run the following command:
//
//	 ENT_INTEGRATION_ENDPOINT="root:pass@tcp(localhost:3306)/test?parseTime=True" go test -v
//
var dsn string

func ExampleActivity() {
	if dsn == "" {
		return
	}
	ctx := context.Background()
	drv, err := sql.Open("mysql", dsn)
	if err != nil {
		log.Fatalf("failed creating database client: %v", err)
	}
	defer drv.Close()
	client := NewClient(Driver(drv))
	// creating vertices for the activity's edges.

	// create activity vertex with its edges.
	a := client.Activity.
		Create().
		SetActivity("string").
		SetLoggedAt(time.Now()).
		SaveX(ctx)
	log.Println("activity created:", a)

	// query edges.

	// Output:
}
func ExampleProject() {
	if dsn == "" {
		return
	}
	ctx := context.Background()
	drv, err := sql.Open("mysql", dsn)
	if err != nil {
		log.Fatalf("failed creating database client: %v", err)
	}
	defer drv.Close()
	client := NewClient(Driver(drv))
	// creating vertices for the project's edges.
	s0 := client.Sprint.
		Create().
		SetCounter(1).
		SetSprintGoal("string").
		SetState(sprint.StateCreated).
		SetStartedAt(time.Now()).
		SetFinishedAt(time.Now()).
		SaveX(ctx)
	log.Println("sprint created:", s0)
	s1 := client.Story.
		Create().
		SetSlug("string").
		SetName("string").
		SetDescription("string").
		SetState(story.StateCreated).
		SaveX(ctx)
	log.Println("story created:", s1)

	// create project vertex with its edges.
	pr := client.Project.
		Create().
		SetName("string").
		SetSlug("string").
		SetCurrent(true).
		AddSprints(s0).
		AddStories(s1).
		SaveX(ctx)
	log.Println("project created:", pr)

	// query edges.
	s0, err = pr.QuerySprints().First(ctx)
	if err != nil {
		log.Fatalf("failed querying sprints: %v", err)
	}
	log.Println("sprints found:", s0)

	s1, err = pr.QueryStories().First(ctx)
	if err != nil {
		log.Fatalf("failed querying stories: %v", err)
	}
	log.Println("stories found:", s1)

	// Output:
}
func ExampleSprint() {
	if dsn == "" {
		return
	}
	ctx := context.Background()
	drv, err := sql.Open("mysql", dsn)
	if err != nil {
		log.Fatalf("failed creating database client: %v", err)
	}
	defer drv.Close()
	client := NewClient(Driver(drv))
	// creating vertices for the sprint's edges.
	s1 := client.Story.
		Create().
		SetSlug("string").
		SetName("string").
		SetDescription("string").
		SetState(story.StateCreated).
		SaveX(ctx)
	log.Println("story created:", s1)

	// create sprint vertex with its edges.
	s := client.Sprint.
		Create().
		SetCounter(1).
		SetSprintGoal("string").
		SetState(sprint.StateCreated).
		SetStartedAt(time.Now()).
		SetFinishedAt(time.Now()).
		AddStories(s1).
		SaveX(ctx)
	log.Println("sprint created:", s)

	// query edges.

	s1, err = s.QueryStories().First(ctx)
	if err != nil {
		log.Fatalf("failed querying stories: %v", err)
	}
	log.Println("stories found:", s1)

	// Output:
}
func ExampleStory() {
	if dsn == "" {
		return
	}
	ctx := context.Background()
	drv, err := sql.Open("mysql", dsn)
	if err != nil {
		log.Fatalf("failed creating database client: %v", err)
	}
	defer drv.Close()
	client := NewClient(Driver(drv))
	// creating vertices for the story's edges.
	a2 := client.Activity.
		Create().
		SetActivity("string").
		SetLoggedAt(time.Now()).
		SaveX(ctx)
	log.Println("activity created:", a2)

	// create story vertex with its edges.
	s := client.Story.
		Create().
		SetSlug("string").
		SetName("string").
		SetDescription("string").
		SetState(story.StateCreated).
		AddActivities(a2).
		SaveX(ctx)
	log.Println("story created:", s)

	// query edges.

	a2, err = s.QueryActivities().First(ctx)
	if err != nil {
		log.Fatalf("failed querying activities: %v", err)
	}
	log.Println("activities found:", a2)

	// Output:
}
