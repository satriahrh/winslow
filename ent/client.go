// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"github.com/satriahrh/winslow/ent/migrate"

	"github.com/satriahrh/winslow/ent/activity"
	"github.com/satriahrh/winslow/ent/project"
	"github.com/satriahrh/winslow/ent/sprint"
	"github.com/satriahrh/winslow/ent/story"

	"github.com/facebookincubator/ent/dialect"
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Activity is the client for interacting with the Activity builders.
	Activity *ActivityClient
	// Project is the client for interacting with the Project builders.
	Project *ProjectClient
	// Sprint is the client for interacting with the Sprint builders.
	Sprint *SprintClient
	// Story is the client for interacting with the Story builders.
	Story *StoryClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	c := config{log: log.Println}
	c.options(opts...)
	return &Client{
		config:   c,
		Schema:   migrate.NewSchema(c.driver),
		Activity: NewActivityClient(c),
		Project:  NewProjectClient(c),
		Sprint:   NewSprintClient(c),
		Story:    NewStoryClient(c),
	}
}

// Open opens a connection to the database specified by the driver name and a
// driver-specific data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %v", err)
	}
	cfg := config{driver: tx, log: c.log, debug: c.debug}
	return &Tx{
		config:   cfg,
		Activity: NewActivityClient(cfg),
		Project:  NewProjectClient(cfg),
		Sprint:   NewSprintClient(cfg),
		Story:    NewStoryClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Activity.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := config{driver: dialect.Debug(c.driver, c.log), log: c.log, debug: true}
	return &Client{
		config:   cfg,
		Schema:   migrate.NewSchema(cfg.driver),
		Activity: NewActivityClient(cfg),
		Project:  NewProjectClient(cfg),
		Sprint:   NewSprintClient(cfg),
		Story:    NewStoryClient(cfg),
	}
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// ActivityClient is a client for the Activity schema.
type ActivityClient struct {
	config
}

// NewActivityClient returns a client for the Activity from the given config.
func NewActivityClient(c config) *ActivityClient {
	return &ActivityClient{config: c}
}

// Create returns a create builder for Activity.
func (c *ActivityClient) Create() *ActivityCreate {
	return &ActivityCreate{config: c.config}
}

// Update returns an update builder for Activity.
func (c *ActivityClient) Update() *ActivityUpdate {
	return &ActivityUpdate{config: c.config}
}

// UpdateOne returns an update builder for the given entity.
func (c *ActivityClient) UpdateOne(a *Activity) *ActivityUpdateOne {
	return c.UpdateOneID(a.ID)
}

// UpdateOneID returns an update builder for the given id.
func (c *ActivityClient) UpdateOneID(id int) *ActivityUpdateOne {
	return &ActivityUpdateOne{config: c.config, id: id}
}

// Delete returns a delete builder for Activity.
func (c *ActivityClient) Delete() *ActivityDelete {
	return &ActivityDelete{config: c.config}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ActivityClient) DeleteOne(a *Activity) *ActivityDeleteOne {
	return c.DeleteOneID(a.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ActivityClient) DeleteOneID(id int) *ActivityDeleteOne {
	return &ActivityDeleteOne{c.Delete().Where(activity.ID(id))}
}

// Create returns a query builder for Activity.
func (c *ActivityClient) Query() *ActivityQuery {
	return &ActivityQuery{config: c.config}
}

// Get returns a Activity entity by its id.
func (c *ActivityClient) Get(ctx context.Context, id int) (*Activity, error) {
	return c.Query().Where(activity.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ActivityClient) GetX(ctx context.Context, id int) *Activity {
	a, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return a
}

// QueryStory queries the story edge of a Activity.
func (c *ActivityClient) QueryStory(a *Activity) *StoryQuery {
	query := &StoryQuery{config: c.config}
	id := a.ID
	step := sqlgraph.NewStep(
		sqlgraph.From(activity.Table, activity.FieldID, id),
		sqlgraph.To(story.Table, story.FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, activity.StoryTable, activity.StoryPrimaryKey...),
	)
	query.sql = sqlgraph.Neighbors(a.driver.Dialect(), step)

	return query
}

// ProjectClient is a client for the Project schema.
type ProjectClient struct {
	config
}

// NewProjectClient returns a client for the Project from the given config.
func NewProjectClient(c config) *ProjectClient {
	return &ProjectClient{config: c}
}

// Create returns a create builder for Project.
func (c *ProjectClient) Create() *ProjectCreate {
	return &ProjectCreate{config: c.config}
}

// Update returns an update builder for Project.
func (c *ProjectClient) Update() *ProjectUpdate {
	return &ProjectUpdate{config: c.config}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProjectClient) UpdateOne(pr *Project) *ProjectUpdateOne {
	return c.UpdateOneID(pr.ID)
}

// UpdateOneID returns an update builder for the given id.
func (c *ProjectClient) UpdateOneID(id int) *ProjectUpdateOne {
	return &ProjectUpdateOne{config: c.config, id: id}
}

// Delete returns a delete builder for Project.
func (c *ProjectClient) Delete() *ProjectDelete {
	return &ProjectDelete{config: c.config}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ProjectClient) DeleteOne(pr *Project) *ProjectDeleteOne {
	return c.DeleteOneID(pr.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ProjectClient) DeleteOneID(id int) *ProjectDeleteOne {
	return &ProjectDeleteOne{c.Delete().Where(project.ID(id))}
}

// Create returns a query builder for Project.
func (c *ProjectClient) Query() *ProjectQuery {
	return &ProjectQuery{config: c.config}
}

// Get returns a Project entity by its id.
func (c *ProjectClient) Get(ctx context.Context, id int) (*Project, error) {
	return c.Query().Where(project.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProjectClient) GetX(ctx context.Context, id int) *Project {
	pr, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return pr
}

// QuerySprints queries the sprints edge of a Project.
func (c *ProjectClient) QuerySprints(pr *Project) *SprintQuery {
	query := &SprintQuery{config: c.config}
	id := pr.ID
	step := sqlgraph.NewStep(
		sqlgraph.From(project.Table, project.FieldID, id),
		sqlgraph.To(sprint.Table, sprint.FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, project.SprintsTable, project.SprintsPrimaryKey...),
	)
	query.sql = sqlgraph.Neighbors(pr.driver.Dialect(), step)

	return query
}

// QueryStories queries the stories edge of a Project.
func (c *ProjectClient) QueryStories(pr *Project) *StoryQuery {
	query := &StoryQuery{config: c.config}
	id := pr.ID
	step := sqlgraph.NewStep(
		sqlgraph.From(project.Table, project.FieldID, id),
		sqlgraph.To(story.Table, story.FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, project.StoriesTable, project.StoriesPrimaryKey...),
	)
	query.sql = sqlgraph.Neighbors(pr.driver.Dialect(), step)

	return query
}

// SprintClient is a client for the Sprint schema.
type SprintClient struct {
	config
}

// NewSprintClient returns a client for the Sprint from the given config.
func NewSprintClient(c config) *SprintClient {
	return &SprintClient{config: c}
}

// Create returns a create builder for Sprint.
func (c *SprintClient) Create() *SprintCreate {
	return &SprintCreate{config: c.config}
}

// Update returns an update builder for Sprint.
func (c *SprintClient) Update() *SprintUpdate {
	return &SprintUpdate{config: c.config}
}

// UpdateOne returns an update builder for the given entity.
func (c *SprintClient) UpdateOne(s *Sprint) *SprintUpdateOne {
	return c.UpdateOneID(s.ID)
}

// UpdateOneID returns an update builder for the given id.
func (c *SprintClient) UpdateOneID(id int) *SprintUpdateOne {
	return &SprintUpdateOne{config: c.config, id: id}
}

// Delete returns a delete builder for Sprint.
func (c *SprintClient) Delete() *SprintDelete {
	return &SprintDelete{config: c.config}
}

// DeleteOne returns a delete builder for the given entity.
func (c *SprintClient) DeleteOne(s *Sprint) *SprintDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *SprintClient) DeleteOneID(id int) *SprintDeleteOne {
	return &SprintDeleteOne{c.Delete().Where(sprint.ID(id))}
}

// Create returns a query builder for Sprint.
func (c *SprintClient) Query() *SprintQuery {
	return &SprintQuery{config: c.config}
}

// Get returns a Sprint entity by its id.
func (c *SprintClient) Get(ctx context.Context, id int) (*Sprint, error) {
	return c.Query().Where(sprint.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SprintClient) GetX(ctx context.Context, id int) *Sprint {
	s, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return s
}

// QueryProject queries the project edge of a Sprint.
func (c *SprintClient) QueryProject(s *Sprint) *ProjectQuery {
	query := &ProjectQuery{config: c.config}
	id := s.ID
	step := sqlgraph.NewStep(
		sqlgraph.From(sprint.Table, sprint.FieldID, id),
		sqlgraph.To(project.Table, project.FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, sprint.ProjectTable, sprint.ProjectPrimaryKey...),
	)
	query.sql = sqlgraph.Neighbors(s.driver.Dialect(), step)

	return query
}

// QueryStories queries the stories edge of a Sprint.
func (c *SprintClient) QueryStories(s *Sprint) *StoryQuery {
	query := &StoryQuery{config: c.config}
	id := s.ID
	step := sqlgraph.NewStep(
		sqlgraph.From(sprint.Table, sprint.FieldID, id),
		sqlgraph.To(story.Table, story.FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, sprint.StoriesTable, sprint.StoriesPrimaryKey...),
	)
	query.sql = sqlgraph.Neighbors(s.driver.Dialect(), step)

	return query
}

// StoryClient is a client for the Story schema.
type StoryClient struct {
	config
}

// NewStoryClient returns a client for the Story from the given config.
func NewStoryClient(c config) *StoryClient {
	return &StoryClient{config: c}
}

// Create returns a create builder for Story.
func (c *StoryClient) Create() *StoryCreate {
	return &StoryCreate{config: c.config}
}

// Update returns an update builder for Story.
func (c *StoryClient) Update() *StoryUpdate {
	return &StoryUpdate{config: c.config}
}

// UpdateOne returns an update builder for the given entity.
func (c *StoryClient) UpdateOne(s *Story) *StoryUpdateOne {
	return c.UpdateOneID(s.ID)
}

// UpdateOneID returns an update builder for the given id.
func (c *StoryClient) UpdateOneID(id int) *StoryUpdateOne {
	return &StoryUpdateOne{config: c.config, id: id}
}

// Delete returns a delete builder for Story.
func (c *StoryClient) Delete() *StoryDelete {
	return &StoryDelete{config: c.config}
}

// DeleteOne returns a delete builder for the given entity.
func (c *StoryClient) DeleteOne(s *Story) *StoryDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *StoryClient) DeleteOneID(id int) *StoryDeleteOne {
	return &StoryDeleteOne{c.Delete().Where(story.ID(id))}
}

// Create returns a query builder for Story.
func (c *StoryClient) Query() *StoryQuery {
	return &StoryQuery{config: c.config}
}

// Get returns a Story entity by its id.
func (c *StoryClient) Get(ctx context.Context, id int) (*Story, error) {
	return c.Query().Where(story.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *StoryClient) GetX(ctx context.Context, id int) *Story {
	s, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return s
}

// QueryProject queries the project edge of a Story.
func (c *StoryClient) QueryProject(s *Story) *ProjectQuery {
	query := &ProjectQuery{config: c.config}
	id := s.ID
	step := sqlgraph.NewStep(
		sqlgraph.From(story.Table, story.FieldID, id),
		sqlgraph.To(project.Table, project.FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, story.ProjectTable, story.ProjectPrimaryKey...),
	)
	query.sql = sqlgraph.Neighbors(s.driver.Dialect(), step)

	return query
}

// QuerySprint queries the sprint edge of a Story.
func (c *StoryClient) QuerySprint(s *Story) *SprintQuery {
	query := &SprintQuery{config: c.config}
	id := s.ID
	step := sqlgraph.NewStep(
		sqlgraph.From(story.Table, story.FieldID, id),
		sqlgraph.To(sprint.Table, sprint.FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, story.SprintTable, story.SprintPrimaryKey...),
	)
	query.sql = sqlgraph.Neighbors(s.driver.Dialect(), step)

	return query
}

// QueryActivities queries the activities edge of a Story.
func (c *StoryClient) QueryActivities(s *Story) *ActivityQuery {
	query := &ActivityQuery{config: c.config}
	id := s.ID
	step := sqlgraph.NewStep(
		sqlgraph.From(story.Table, story.FieldID, id),
		sqlgraph.To(activity.Table, activity.FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, story.ActivitiesTable, story.ActivitiesPrimaryKey...),
	)
	query.sql = sqlgraph.Neighbors(s.driver.Dialect(), step)

	return query
}
