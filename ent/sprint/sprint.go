// Code generated by entc, DO NOT EDIT.

package sprint

import (
	"fmt"
)

const (
	// Label holds the string label denoting the sprint type in the database.
	Label = "sprint"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCounter holds the string denoting the counter vertex property in the database.
	FieldCounter = "counter"
	// FieldSprintGoal holds the string denoting the sprint_goal vertex property in the database.
	FieldSprintGoal = "sprint_goal"
	// FieldState holds the string denoting the state vertex property in the database.
	FieldState = "state"
	// FieldStartedAt holds the string denoting the started_at vertex property in the database.
	FieldStartedAt = "started_at"
	// FieldFinishedAt holds the string denoting the finished_at vertex property in the database.
	FieldFinishedAt = "finished_at"

	// Table holds the table name of the sprint in the database.
	Table = "sprints"
	// ProjectTable is the table the holds the project relation/edge. The primary key declared below.
	ProjectTable = "project_sprints"
	// ProjectInverseTable is the table name for the Project entity.
	// It exists in this package in order to avoid circular dependency with the "project" package.
	ProjectInverseTable = "projects"
	// StoriesTable is the table the holds the stories relation/edge. The primary key declared below.
	StoriesTable = "sprint_stories"
	// StoriesInverseTable is the table name for the Story entity.
	// It exists in this package in order to avoid circular dependency with the "story" package.
	StoriesInverseTable = "stories"
)

// Columns holds all SQL columns are sprint fields.
var Columns = []string{
	FieldID,
	FieldCounter,
	FieldSprintGoal,
	FieldState,
	FieldStartedAt,
	FieldFinishedAt,
}

var (
	// ProjectPrimaryKey and ProjectColumn2 are the table columns denoting the
	// primary key for the project relation (M2M).
	ProjectPrimaryKey = []string{"project_id", "sprint_id"}
	// StoriesPrimaryKey and StoriesColumn2 are the table columns denoting the
	// primary key for the stories relation (M2M).
	StoriesPrimaryKey = []string{"sprint_id", "story_id"}
)

// State defines the type for the state enum field.
type State string

const (
	StateCreated  State = "created"
	StateStarted  State = "started"
	StateFinished State = "finished"
)

func (s State) String() string {
	return string(s)
}

// StateValidator is a validator for the "state" field enum values. It is called by the builders before save.
func StateValidator(state State) error {
	switch state {
	case StateCreated, StateStarted, StateFinished:
		return nil
	default:
		return fmt.Errorf("sprint: invalid enum value for state field: %q", state)
	}
}
