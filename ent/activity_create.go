// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"time"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/satriahrh/winslow/ent/activity"
	"github.com/satriahrh/winslow/ent/story"
)

// ActivityCreate is the builder for creating a Activity entity.
type ActivityCreate struct {
	config
	activity  *string
	logged_at *time.Time
	story     map[int]struct{}
}

// SetActivity sets the activity field.
func (ac *ActivityCreate) SetActivity(s string) *ActivityCreate {
	ac.activity = &s
	return ac
}

// SetLoggedAt sets the logged_at field.
func (ac *ActivityCreate) SetLoggedAt(t time.Time) *ActivityCreate {
	ac.logged_at = &t
	return ac
}

// SetNillableLoggedAt sets the logged_at field if the given value is not nil.
func (ac *ActivityCreate) SetNillableLoggedAt(t *time.Time) *ActivityCreate {
	if t != nil {
		ac.SetLoggedAt(*t)
	}
	return ac
}

// AddStoryIDs adds the story edge to Story by ids.
func (ac *ActivityCreate) AddStoryIDs(ids ...int) *ActivityCreate {
	if ac.story == nil {
		ac.story = make(map[int]struct{})
	}
	for i := range ids {
		ac.story[ids[i]] = struct{}{}
	}
	return ac
}

// AddStory adds the story edges to Story.
func (ac *ActivityCreate) AddStory(s ...*Story) *ActivityCreate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ac.AddStoryIDs(ids...)
}

// Save creates the Activity in the database.
func (ac *ActivityCreate) Save(ctx context.Context) (*Activity, error) {
	if ac.activity == nil {
		return nil, errors.New("ent: missing required field \"activity\"")
	}
	if ac.logged_at == nil {
		v := activity.DefaultLoggedAt()
		ac.logged_at = &v
	}
	return ac.sqlSave(ctx)
}

// SaveX calls Save and panics if Save returns an error.
func (ac *ActivityCreate) SaveX(ctx context.Context) *Activity {
	v, err := ac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (ac *ActivityCreate) sqlSave(ctx context.Context) (*Activity, error) {
	var (
		a    = &Activity{config: ac.config}
		spec = &sqlgraph.CreateSpec{
			Table: activity.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: activity.FieldID,
			},
		}
	)
	if value := ac.activity; value != nil {
		spec.Fields = append(spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: activity.FieldActivity,
		})
		a.Activity = *value
	}
	if value := ac.logged_at; value != nil {
		spec.Fields = append(spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  *value,
			Column: activity.FieldLoggedAt,
		})
		a.LoggedAt = *value
	}
	if nodes := ac.story; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   activity.StoryTable,
			Columns: activity.StoryPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: story.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		spec.Edges = append(spec.Edges, edge)
	}
	if err := sqlgraph.CreateNode(ctx, ac.driver, spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := spec.ID.Value.(int64)
	a.ID = int(id)
	return a, nil
}
