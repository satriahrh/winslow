// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/satriahrh/winslow/ent/activity"
	"github.com/satriahrh/winslow/ent/predicate"
	"github.com/satriahrh/winslow/ent/story"
)

// ActivityUpdate is the builder for updating Activity entities.
type ActivityUpdate struct {
	config
	activity     *string
	logged_at    *time.Time
	story        map[int]struct{}
	removedStory map[int]struct{}
	predicates   []predicate.Activity
}

// Where adds a new predicate for the builder.
func (au *ActivityUpdate) Where(ps ...predicate.Activity) *ActivityUpdate {
	au.predicates = append(au.predicates, ps...)
	return au
}

// SetActivity sets the activity field.
func (au *ActivityUpdate) SetActivity(s string) *ActivityUpdate {
	au.activity = &s
	return au
}

// SetLoggedAt sets the logged_at field.
func (au *ActivityUpdate) SetLoggedAt(t time.Time) *ActivityUpdate {
	au.logged_at = &t
	return au
}

// SetNillableLoggedAt sets the logged_at field if the given value is not nil.
func (au *ActivityUpdate) SetNillableLoggedAt(t *time.Time) *ActivityUpdate {
	if t != nil {
		au.SetLoggedAt(*t)
	}
	return au
}

// AddStoryIDs adds the story edge to Story by ids.
func (au *ActivityUpdate) AddStoryIDs(ids ...int) *ActivityUpdate {
	if au.story == nil {
		au.story = make(map[int]struct{})
	}
	for i := range ids {
		au.story[ids[i]] = struct{}{}
	}
	return au
}

// AddStory adds the story edges to Story.
func (au *ActivityUpdate) AddStory(s ...*Story) *ActivityUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return au.AddStoryIDs(ids...)
}

// RemoveStoryIDs removes the story edge to Story by ids.
func (au *ActivityUpdate) RemoveStoryIDs(ids ...int) *ActivityUpdate {
	if au.removedStory == nil {
		au.removedStory = make(map[int]struct{})
	}
	for i := range ids {
		au.removedStory[ids[i]] = struct{}{}
	}
	return au
}

// RemoveStory removes story edges to Story.
func (au *ActivityUpdate) RemoveStory(s ...*Story) *ActivityUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return au.RemoveStoryIDs(ids...)
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (au *ActivityUpdate) Save(ctx context.Context) (int, error) {
	return au.sqlSave(ctx)
}

// SaveX is like Save, but panics if an error occurs.
func (au *ActivityUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *ActivityUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *ActivityUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

func (au *ActivityUpdate) sqlSave(ctx context.Context) (n int, err error) {
	spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   activity.Table,
			Columns: activity.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: activity.FieldID,
			},
		},
	}
	if ps := au.predicates; len(ps) > 0 {
		spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value := au.activity; value != nil {
		spec.Fields.Set = append(spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: activity.FieldActivity,
		})
	}
	if value := au.logged_at; value != nil {
		spec.Fields.Set = append(spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  *value,
			Column: activity.FieldLoggedAt,
		})
	}
	if nodes := au.removedStory; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   activity.StoryTable,
			Columns: activity.StoryPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: story.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		spec.Edges.Clear = append(spec.Edges.Clear, edge)
	}
	if nodes := au.story; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   activity.StoryTable,
			Columns: activity.StoryPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: story.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		spec.Edges.Add = append(spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// ActivityUpdateOne is the builder for updating a single Activity entity.
type ActivityUpdateOne struct {
	config
	id           int
	activity     *string
	logged_at    *time.Time
	story        map[int]struct{}
	removedStory map[int]struct{}
}

// SetActivity sets the activity field.
func (auo *ActivityUpdateOne) SetActivity(s string) *ActivityUpdateOne {
	auo.activity = &s
	return auo
}

// SetLoggedAt sets the logged_at field.
func (auo *ActivityUpdateOne) SetLoggedAt(t time.Time) *ActivityUpdateOne {
	auo.logged_at = &t
	return auo
}

// SetNillableLoggedAt sets the logged_at field if the given value is not nil.
func (auo *ActivityUpdateOne) SetNillableLoggedAt(t *time.Time) *ActivityUpdateOne {
	if t != nil {
		auo.SetLoggedAt(*t)
	}
	return auo
}

// AddStoryIDs adds the story edge to Story by ids.
func (auo *ActivityUpdateOne) AddStoryIDs(ids ...int) *ActivityUpdateOne {
	if auo.story == nil {
		auo.story = make(map[int]struct{})
	}
	for i := range ids {
		auo.story[ids[i]] = struct{}{}
	}
	return auo
}

// AddStory adds the story edges to Story.
func (auo *ActivityUpdateOne) AddStory(s ...*Story) *ActivityUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return auo.AddStoryIDs(ids...)
}

// RemoveStoryIDs removes the story edge to Story by ids.
func (auo *ActivityUpdateOne) RemoveStoryIDs(ids ...int) *ActivityUpdateOne {
	if auo.removedStory == nil {
		auo.removedStory = make(map[int]struct{})
	}
	for i := range ids {
		auo.removedStory[ids[i]] = struct{}{}
	}
	return auo
}

// RemoveStory removes story edges to Story.
func (auo *ActivityUpdateOne) RemoveStory(s ...*Story) *ActivityUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return auo.RemoveStoryIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (auo *ActivityUpdateOne) Save(ctx context.Context) (*Activity, error) {
	return auo.sqlSave(ctx)
}

// SaveX is like Save, but panics if an error occurs.
func (auo *ActivityUpdateOne) SaveX(ctx context.Context) *Activity {
	a, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return a
}

// Exec executes the query on the entity.
func (auo *ActivityUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *ActivityUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (auo *ActivityUpdateOne) sqlSave(ctx context.Context) (a *Activity, err error) {
	spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   activity.Table,
			Columns: activity.Columns,
			ID: &sqlgraph.FieldSpec{
				Value:  auo.id,
				Type:   field.TypeInt,
				Column: activity.FieldID,
			},
		},
	}
	if value := auo.activity; value != nil {
		spec.Fields.Set = append(spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: activity.FieldActivity,
		})
	}
	if value := auo.logged_at; value != nil {
		spec.Fields.Set = append(spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  *value,
			Column: activity.FieldLoggedAt,
		})
	}
	if nodes := auo.removedStory; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   activity.StoryTable,
			Columns: activity.StoryPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: story.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		spec.Edges.Clear = append(spec.Edges.Clear, edge)
	}
	if nodes := auo.story; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   activity.StoryTable,
			Columns: activity.StoryPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: story.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		spec.Edges.Add = append(spec.Edges.Add, edge)
	}
	a = &Activity{config: auo.config}
	spec.Assign = a.assignValues
	spec.ScanValues = a.scanValues()
	if err = sqlgraph.UpdateNode(ctx, auo.driver, spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return a, nil
}
