// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/satriahrh/winslow/ent/activity"
	"github.com/satriahrh/winslow/ent/project"
	"github.com/satriahrh/winslow/ent/sprint"
	"github.com/satriahrh/winslow/ent/story"
)

// StoryCreate is the builder for creating a Story entity.
type StoryCreate struct {
	config
	slug        *string
	name        *string
	description *string
	state       *story.State
	project     map[int]struct{}
	sprint      map[int]struct{}
	activities  map[int]struct{}
}

// SetSlug sets the slug field.
func (sc *StoryCreate) SetSlug(s string) *StoryCreate {
	sc.slug = &s
	return sc
}

// SetName sets the name field.
func (sc *StoryCreate) SetName(s string) *StoryCreate {
	sc.name = &s
	return sc
}

// SetDescription sets the description field.
func (sc *StoryCreate) SetDescription(s string) *StoryCreate {
	sc.description = &s
	return sc
}

// SetState sets the state field.
func (sc *StoryCreate) SetState(s story.State) *StoryCreate {
	sc.state = &s
	return sc
}

// AddProjectIDs adds the project edge to Project by ids.
func (sc *StoryCreate) AddProjectIDs(ids ...int) *StoryCreate {
	if sc.project == nil {
		sc.project = make(map[int]struct{})
	}
	for i := range ids {
		sc.project[ids[i]] = struct{}{}
	}
	return sc
}

// AddProject adds the project edges to Project.
func (sc *StoryCreate) AddProject(p ...*Project) *StoryCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return sc.AddProjectIDs(ids...)
}

// AddSprintIDs adds the sprint edge to Sprint by ids.
func (sc *StoryCreate) AddSprintIDs(ids ...int) *StoryCreate {
	if sc.sprint == nil {
		sc.sprint = make(map[int]struct{})
	}
	for i := range ids {
		sc.sprint[ids[i]] = struct{}{}
	}
	return sc
}

// AddSprint adds the sprint edges to Sprint.
func (sc *StoryCreate) AddSprint(s ...*Sprint) *StoryCreate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sc.AddSprintIDs(ids...)
}

// AddActivityIDs adds the activities edge to Activity by ids.
func (sc *StoryCreate) AddActivityIDs(ids ...int) *StoryCreate {
	if sc.activities == nil {
		sc.activities = make(map[int]struct{})
	}
	for i := range ids {
		sc.activities[ids[i]] = struct{}{}
	}
	return sc
}

// AddActivities adds the activities edges to Activity.
func (sc *StoryCreate) AddActivities(a ...*Activity) *StoryCreate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return sc.AddActivityIDs(ids...)
}

// Save creates the Story in the database.
func (sc *StoryCreate) Save(ctx context.Context) (*Story, error) {
	if sc.slug == nil {
		return nil, errors.New("ent: missing required field \"slug\"")
	}
	if sc.name == nil {
		return nil, errors.New("ent: missing required field \"name\"")
	}
	if err := story.NameValidator(*sc.name); err != nil {
		return nil, fmt.Errorf("ent: validator failed for field \"name\": %v", err)
	}
	if sc.description == nil {
		return nil, errors.New("ent: missing required field \"description\"")
	}
	if sc.state == nil {
		return nil, errors.New("ent: missing required field \"state\"")
	}
	if err := story.StateValidator(*sc.state); err != nil {
		return nil, fmt.Errorf("ent: validator failed for field \"state\": %v", err)
	}
	return sc.sqlSave(ctx)
}

// SaveX calls Save and panics if Save returns an error.
func (sc *StoryCreate) SaveX(ctx context.Context) *Story {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (sc *StoryCreate) sqlSave(ctx context.Context) (*Story, error) {
	var (
		s    = &Story{config: sc.config}
		spec = &sqlgraph.CreateSpec{
			Table: story.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: story.FieldID,
			},
		}
	)
	if value := sc.slug; value != nil {
		spec.Fields = append(spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: story.FieldSlug,
		})
		s.Slug = *value
	}
	if value := sc.name; value != nil {
		spec.Fields = append(spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: story.FieldName,
		})
		s.Name = *value
	}
	if value := sc.description; value != nil {
		spec.Fields = append(spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: story.FieldDescription,
		})
		s.Description = *value
	}
	if value := sc.state; value != nil {
		spec.Fields = append(spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  *value,
			Column: story.FieldState,
		})
		s.State = *value
	}
	if nodes := sc.project; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   story.ProjectTable,
			Columns: story.ProjectPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: project.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		spec.Edges = append(spec.Edges, edge)
	}
	if nodes := sc.sprint; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   story.SprintTable,
			Columns: story.SprintPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: sprint.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		spec.Edges = append(spec.Edges, edge)
	}
	if nodes := sc.activities; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   story.ActivitiesTable,
			Columns: story.ActivitiesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: activity.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		spec.Edges = append(spec.Edges, edge)
	}
	if err := sqlgraph.CreateNode(ctx, sc.driver, spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := spec.ID.Value.(int64)
	s.ID = int(id)
	return s, nil
}
