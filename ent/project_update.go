// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/satriahrh/winslow/ent/predicate"
	"github.com/satriahrh/winslow/ent/project"
	"github.com/satriahrh/winslow/ent/sprint"
	"github.com/satriahrh/winslow/ent/story"
)

// ProjectUpdate is the builder for updating Project entities.
type ProjectUpdate struct {
	config
	name           *string
	slug           *string
	current        *bool
	sprints        map[int]struct{}
	stories        map[int]struct{}
	removedSprints map[int]struct{}
	removedStories map[int]struct{}
	predicates     []predicate.Project
}

// Where adds a new predicate for the builder.
func (pu *ProjectUpdate) Where(ps ...predicate.Project) *ProjectUpdate {
	pu.predicates = append(pu.predicates, ps...)
	return pu
}

// SetName sets the name field.
func (pu *ProjectUpdate) SetName(s string) *ProjectUpdate {
	pu.name = &s
	return pu
}

// SetSlug sets the slug field.
func (pu *ProjectUpdate) SetSlug(s string) *ProjectUpdate {
	pu.slug = &s
	return pu
}

// SetCurrent sets the current field.
func (pu *ProjectUpdate) SetCurrent(b bool) *ProjectUpdate {
	pu.current = &b
	return pu
}

// SetNillableCurrent sets the current field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableCurrent(b *bool) *ProjectUpdate {
	if b != nil {
		pu.SetCurrent(*b)
	}
	return pu
}

// AddSprintIDs adds the sprints edge to Sprint by ids.
func (pu *ProjectUpdate) AddSprintIDs(ids ...int) *ProjectUpdate {
	if pu.sprints == nil {
		pu.sprints = make(map[int]struct{})
	}
	for i := range ids {
		pu.sprints[ids[i]] = struct{}{}
	}
	return pu
}

// AddSprints adds the sprints edges to Sprint.
func (pu *ProjectUpdate) AddSprints(s ...*Sprint) *ProjectUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return pu.AddSprintIDs(ids...)
}

// AddStoryIDs adds the stories edge to Story by ids.
func (pu *ProjectUpdate) AddStoryIDs(ids ...int) *ProjectUpdate {
	if pu.stories == nil {
		pu.stories = make(map[int]struct{})
	}
	for i := range ids {
		pu.stories[ids[i]] = struct{}{}
	}
	return pu
}

// AddStories adds the stories edges to Story.
func (pu *ProjectUpdate) AddStories(s ...*Story) *ProjectUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return pu.AddStoryIDs(ids...)
}

// RemoveSprintIDs removes the sprints edge to Sprint by ids.
func (pu *ProjectUpdate) RemoveSprintIDs(ids ...int) *ProjectUpdate {
	if pu.removedSprints == nil {
		pu.removedSprints = make(map[int]struct{})
	}
	for i := range ids {
		pu.removedSprints[ids[i]] = struct{}{}
	}
	return pu
}

// RemoveSprints removes sprints edges to Sprint.
func (pu *ProjectUpdate) RemoveSprints(s ...*Sprint) *ProjectUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return pu.RemoveSprintIDs(ids...)
}

// RemoveStoryIDs removes the stories edge to Story by ids.
func (pu *ProjectUpdate) RemoveStoryIDs(ids ...int) *ProjectUpdate {
	if pu.removedStories == nil {
		pu.removedStories = make(map[int]struct{})
	}
	for i := range ids {
		pu.removedStories[ids[i]] = struct{}{}
	}
	return pu
}

// RemoveStories removes stories edges to Story.
func (pu *ProjectUpdate) RemoveStories(s ...*Story) *ProjectUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return pu.RemoveStoryIDs(ids...)
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (pu *ProjectUpdate) Save(ctx context.Context) (int, error) {
	if pu.name != nil {
		if err := project.NameValidator(*pu.name); err != nil {
			return 0, fmt.Errorf("ent: validator failed for field \"name\": %v", err)
		}
	}
	if pu.slug != nil {
		if err := project.SlugValidator(*pu.slug); err != nil {
			return 0, fmt.Errorf("ent: validator failed for field \"slug\": %v", err)
		}
	}
	return pu.sqlSave(ctx)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *ProjectUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *ProjectUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *ProjectUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pu *ProjectUpdate) sqlSave(ctx context.Context) (n int, err error) {
	spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   project.Table,
			Columns: project.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: project.FieldID,
			},
		},
	}
	if ps := pu.predicates; len(ps) > 0 {
		spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value := pu.name; value != nil {
		spec.Fields.Set = append(spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: project.FieldName,
		})
	}
	if value := pu.slug; value != nil {
		spec.Fields.Set = append(spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: project.FieldSlug,
		})
	}
	if value := pu.current; value != nil {
		spec.Fields.Set = append(spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  *value,
			Column: project.FieldCurrent,
		})
	}
	if nodes := pu.removedSprints; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   project.SprintsTable,
			Columns: project.SprintsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: sprint.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		spec.Edges.Clear = append(spec.Edges.Clear, edge)
	}
	if nodes := pu.sprints; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   project.SprintsTable,
			Columns: project.SprintsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: sprint.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		spec.Edges.Add = append(spec.Edges.Add, edge)
	}
	if nodes := pu.removedStories; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   project.StoriesTable,
			Columns: project.StoriesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: story.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		spec.Edges.Clear = append(spec.Edges.Clear, edge)
	}
	if nodes := pu.stories; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   project.StoriesTable,
			Columns: project.StoriesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: story.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		spec.Edges.Add = append(spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// ProjectUpdateOne is the builder for updating a single Project entity.
type ProjectUpdateOne struct {
	config
	id             int
	name           *string
	slug           *string
	current        *bool
	sprints        map[int]struct{}
	stories        map[int]struct{}
	removedSprints map[int]struct{}
	removedStories map[int]struct{}
}

// SetName sets the name field.
func (puo *ProjectUpdateOne) SetName(s string) *ProjectUpdateOne {
	puo.name = &s
	return puo
}

// SetSlug sets the slug field.
func (puo *ProjectUpdateOne) SetSlug(s string) *ProjectUpdateOne {
	puo.slug = &s
	return puo
}

// SetCurrent sets the current field.
func (puo *ProjectUpdateOne) SetCurrent(b bool) *ProjectUpdateOne {
	puo.current = &b
	return puo
}

// SetNillableCurrent sets the current field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableCurrent(b *bool) *ProjectUpdateOne {
	if b != nil {
		puo.SetCurrent(*b)
	}
	return puo
}

// AddSprintIDs adds the sprints edge to Sprint by ids.
func (puo *ProjectUpdateOne) AddSprintIDs(ids ...int) *ProjectUpdateOne {
	if puo.sprints == nil {
		puo.sprints = make(map[int]struct{})
	}
	for i := range ids {
		puo.sprints[ids[i]] = struct{}{}
	}
	return puo
}

// AddSprints adds the sprints edges to Sprint.
func (puo *ProjectUpdateOne) AddSprints(s ...*Sprint) *ProjectUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return puo.AddSprintIDs(ids...)
}

// AddStoryIDs adds the stories edge to Story by ids.
func (puo *ProjectUpdateOne) AddStoryIDs(ids ...int) *ProjectUpdateOne {
	if puo.stories == nil {
		puo.stories = make(map[int]struct{})
	}
	for i := range ids {
		puo.stories[ids[i]] = struct{}{}
	}
	return puo
}

// AddStories adds the stories edges to Story.
func (puo *ProjectUpdateOne) AddStories(s ...*Story) *ProjectUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return puo.AddStoryIDs(ids...)
}

// RemoveSprintIDs removes the sprints edge to Sprint by ids.
func (puo *ProjectUpdateOne) RemoveSprintIDs(ids ...int) *ProjectUpdateOne {
	if puo.removedSprints == nil {
		puo.removedSprints = make(map[int]struct{})
	}
	for i := range ids {
		puo.removedSprints[ids[i]] = struct{}{}
	}
	return puo
}

// RemoveSprints removes sprints edges to Sprint.
func (puo *ProjectUpdateOne) RemoveSprints(s ...*Sprint) *ProjectUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return puo.RemoveSprintIDs(ids...)
}

// RemoveStoryIDs removes the stories edge to Story by ids.
func (puo *ProjectUpdateOne) RemoveStoryIDs(ids ...int) *ProjectUpdateOne {
	if puo.removedStories == nil {
		puo.removedStories = make(map[int]struct{})
	}
	for i := range ids {
		puo.removedStories[ids[i]] = struct{}{}
	}
	return puo
}

// RemoveStories removes stories edges to Story.
func (puo *ProjectUpdateOne) RemoveStories(s ...*Story) *ProjectUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return puo.RemoveStoryIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (puo *ProjectUpdateOne) Save(ctx context.Context) (*Project, error) {
	if puo.name != nil {
		if err := project.NameValidator(*puo.name); err != nil {
			return nil, fmt.Errorf("ent: validator failed for field \"name\": %v", err)
		}
	}
	if puo.slug != nil {
		if err := project.SlugValidator(*puo.slug); err != nil {
			return nil, fmt.Errorf("ent: validator failed for field \"slug\": %v", err)
		}
	}
	return puo.sqlSave(ctx)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *ProjectUpdateOne) SaveX(ctx context.Context) *Project {
	pr, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return pr
}

// Exec executes the query on the entity.
func (puo *ProjectUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *ProjectUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (puo *ProjectUpdateOne) sqlSave(ctx context.Context) (pr *Project, err error) {
	spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   project.Table,
			Columns: project.Columns,
			ID: &sqlgraph.FieldSpec{
				Value:  puo.id,
				Type:   field.TypeInt,
				Column: project.FieldID,
			},
		},
	}
	if value := puo.name; value != nil {
		spec.Fields.Set = append(spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: project.FieldName,
		})
	}
	if value := puo.slug; value != nil {
		spec.Fields.Set = append(spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: project.FieldSlug,
		})
	}
	if value := puo.current; value != nil {
		spec.Fields.Set = append(spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  *value,
			Column: project.FieldCurrent,
		})
	}
	if nodes := puo.removedSprints; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   project.SprintsTable,
			Columns: project.SprintsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: sprint.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		spec.Edges.Clear = append(spec.Edges.Clear, edge)
	}
	if nodes := puo.sprints; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   project.SprintsTable,
			Columns: project.SprintsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: sprint.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		spec.Edges.Add = append(spec.Edges.Add, edge)
	}
	if nodes := puo.removedStories; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   project.StoriesTable,
			Columns: project.StoriesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: story.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		spec.Edges.Clear = append(spec.Edges.Clear, edge)
	}
	if nodes := puo.stories; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   project.StoriesTable,
			Columns: project.StoriesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: story.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		spec.Edges.Add = append(spec.Edges.Add, edge)
	}
	pr = &Project{config: puo.config}
	spec.Assign = pr.assignValues
	spec.ScanValues = pr.scanValues()
	if err = sqlgraph.UpdateNode(ctx, puo.driver, spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return pr, nil
}
