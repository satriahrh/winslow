// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/satriahrh/winslow/ent/activity"
	"github.com/satriahrh/winslow/ent/predicate"
	"github.com/satriahrh/winslow/ent/project"
	"github.com/satriahrh/winslow/ent/sprint"
	"github.com/satriahrh/winslow/ent/story"
)

// StoryUpdate is the builder for updating Story entities.
type StoryUpdate struct {
	config
	slug              *string
	name              *string
	description       *string
	state             *story.State
	project           map[int]struct{}
	sprint            map[int]struct{}
	activities        map[int]struct{}
	removedProject    map[int]struct{}
	removedSprint     map[int]struct{}
	removedActivities map[int]struct{}
	predicates        []predicate.Story
}

// Where adds a new predicate for the builder.
func (su *StoryUpdate) Where(ps ...predicate.Story) *StoryUpdate {
	su.predicates = append(su.predicates, ps...)
	return su
}

// SetSlug sets the slug field.
func (su *StoryUpdate) SetSlug(s string) *StoryUpdate {
	su.slug = &s
	return su
}

// SetName sets the name field.
func (su *StoryUpdate) SetName(s string) *StoryUpdate {
	su.name = &s
	return su
}

// SetDescription sets the description field.
func (su *StoryUpdate) SetDescription(s string) *StoryUpdate {
	su.description = &s
	return su
}

// SetState sets the state field.
func (su *StoryUpdate) SetState(s story.State) *StoryUpdate {
	su.state = &s
	return su
}

// AddProjectIDs adds the project edge to Project by ids.
func (su *StoryUpdate) AddProjectIDs(ids ...int) *StoryUpdate {
	if su.project == nil {
		su.project = make(map[int]struct{})
	}
	for i := range ids {
		su.project[ids[i]] = struct{}{}
	}
	return su
}

// AddProject adds the project edges to Project.
func (su *StoryUpdate) AddProject(p ...*Project) *StoryUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return su.AddProjectIDs(ids...)
}

// AddSprintIDs adds the sprint edge to Sprint by ids.
func (su *StoryUpdate) AddSprintIDs(ids ...int) *StoryUpdate {
	if su.sprint == nil {
		su.sprint = make(map[int]struct{})
	}
	for i := range ids {
		su.sprint[ids[i]] = struct{}{}
	}
	return su
}

// AddSprint adds the sprint edges to Sprint.
func (su *StoryUpdate) AddSprint(s ...*Sprint) *StoryUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return su.AddSprintIDs(ids...)
}

// AddActivityIDs adds the activities edge to Activity by ids.
func (su *StoryUpdate) AddActivityIDs(ids ...int) *StoryUpdate {
	if su.activities == nil {
		su.activities = make(map[int]struct{})
	}
	for i := range ids {
		su.activities[ids[i]] = struct{}{}
	}
	return su
}

// AddActivities adds the activities edges to Activity.
func (su *StoryUpdate) AddActivities(a ...*Activity) *StoryUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return su.AddActivityIDs(ids...)
}

// RemoveProjectIDs removes the project edge to Project by ids.
func (su *StoryUpdate) RemoveProjectIDs(ids ...int) *StoryUpdate {
	if su.removedProject == nil {
		su.removedProject = make(map[int]struct{})
	}
	for i := range ids {
		su.removedProject[ids[i]] = struct{}{}
	}
	return su
}

// RemoveProject removes project edges to Project.
func (su *StoryUpdate) RemoveProject(p ...*Project) *StoryUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return su.RemoveProjectIDs(ids...)
}

// RemoveSprintIDs removes the sprint edge to Sprint by ids.
func (su *StoryUpdate) RemoveSprintIDs(ids ...int) *StoryUpdate {
	if su.removedSprint == nil {
		su.removedSprint = make(map[int]struct{})
	}
	for i := range ids {
		su.removedSprint[ids[i]] = struct{}{}
	}
	return su
}

// RemoveSprint removes sprint edges to Sprint.
func (su *StoryUpdate) RemoveSprint(s ...*Sprint) *StoryUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return su.RemoveSprintIDs(ids...)
}

// RemoveActivityIDs removes the activities edge to Activity by ids.
func (su *StoryUpdate) RemoveActivityIDs(ids ...int) *StoryUpdate {
	if su.removedActivities == nil {
		su.removedActivities = make(map[int]struct{})
	}
	for i := range ids {
		su.removedActivities[ids[i]] = struct{}{}
	}
	return su
}

// RemoveActivities removes activities edges to Activity.
func (su *StoryUpdate) RemoveActivities(a ...*Activity) *StoryUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return su.RemoveActivityIDs(ids...)
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (su *StoryUpdate) Save(ctx context.Context) (int, error) {
	if su.name != nil {
		if err := story.NameValidator(*su.name); err != nil {
			return 0, fmt.Errorf("ent: validator failed for field \"name\": %v", err)
		}
	}
	if su.state != nil {
		if err := story.StateValidator(*su.state); err != nil {
			return 0, fmt.Errorf("ent: validator failed for field \"state\": %v", err)
		}
	}
	return su.sqlSave(ctx)
}

// SaveX is like Save, but panics if an error occurs.
func (su *StoryUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *StoryUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *StoryUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

func (su *StoryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   story.Table,
			Columns: story.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: story.FieldID,
			},
		},
	}
	if ps := su.predicates; len(ps) > 0 {
		spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value := su.slug; value != nil {
		spec.Fields.Set = append(spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: story.FieldSlug,
		})
	}
	if value := su.name; value != nil {
		spec.Fields.Set = append(spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: story.FieldName,
		})
	}
	if value := su.description; value != nil {
		spec.Fields.Set = append(spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: story.FieldDescription,
		})
	}
	if value := su.state; value != nil {
		spec.Fields.Set = append(spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  *value,
			Column: story.FieldState,
		})
	}
	if nodes := su.removedProject; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   story.ProjectTable,
			Columns: story.ProjectPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: project.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		spec.Edges.Clear = append(spec.Edges.Clear, edge)
	}
	if nodes := su.project; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   story.ProjectTable,
			Columns: story.ProjectPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: project.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		spec.Edges.Add = append(spec.Edges.Add, edge)
	}
	if nodes := su.removedSprint; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   story.SprintTable,
			Columns: story.SprintPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: sprint.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		spec.Edges.Clear = append(spec.Edges.Clear, edge)
	}
	if nodes := su.sprint; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   story.SprintTable,
			Columns: story.SprintPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: sprint.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		spec.Edges.Add = append(spec.Edges.Add, edge)
	}
	if nodes := su.removedActivities; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   story.ActivitiesTable,
			Columns: story.ActivitiesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: activity.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		spec.Edges.Clear = append(spec.Edges.Clear, edge)
	}
	if nodes := su.activities; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   story.ActivitiesTable,
			Columns: story.ActivitiesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: activity.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		spec.Edges.Add = append(spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// StoryUpdateOne is the builder for updating a single Story entity.
type StoryUpdateOne struct {
	config
	id                int
	slug              *string
	name              *string
	description       *string
	state             *story.State
	project           map[int]struct{}
	sprint            map[int]struct{}
	activities        map[int]struct{}
	removedProject    map[int]struct{}
	removedSprint     map[int]struct{}
	removedActivities map[int]struct{}
}

// SetSlug sets the slug field.
func (suo *StoryUpdateOne) SetSlug(s string) *StoryUpdateOne {
	suo.slug = &s
	return suo
}

// SetName sets the name field.
func (suo *StoryUpdateOne) SetName(s string) *StoryUpdateOne {
	suo.name = &s
	return suo
}

// SetDescription sets the description field.
func (suo *StoryUpdateOne) SetDescription(s string) *StoryUpdateOne {
	suo.description = &s
	return suo
}

// SetState sets the state field.
func (suo *StoryUpdateOne) SetState(s story.State) *StoryUpdateOne {
	suo.state = &s
	return suo
}

// AddProjectIDs adds the project edge to Project by ids.
func (suo *StoryUpdateOne) AddProjectIDs(ids ...int) *StoryUpdateOne {
	if suo.project == nil {
		suo.project = make(map[int]struct{})
	}
	for i := range ids {
		suo.project[ids[i]] = struct{}{}
	}
	return suo
}

// AddProject adds the project edges to Project.
func (suo *StoryUpdateOne) AddProject(p ...*Project) *StoryUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return suo.AddProjectIDs(ids...)
}

// AddSprintIDs adds the sprint edge to Sprint by ids.
func (suo *StoryUpdateOne) AddSprintIDs(ids ...int) *StoryUpdateOne {
	if suo.sprint == nil {
		suo.sprint = make(map[int]struct{})
	}
	for i := range ids {
		suo.sprint[ids[i]] = struct{}{}
	}
	return suo
}

// AddSprint adds the sprint edges to Sprint.
func (suo *StoryUpdateOne) AddSprint(s ...*Sprint) *StoryUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return suo.AddSprintIDs(ids...)
}

// AddActivityIDs adds the activities edge to Activity by ids.
func (suo *StoryUpdateOne) AddActivityIDs(ids ...int) *StoryUpdateOne {
	if suo.activities == nil {
		suo.activities = make(map[int]struct{})
	}
	for i := range ids {
		suo.activities[ids[i]] = struct{}{}
	}
	return suo
}

// AddActivities adds the activities edges to Activity.
func (suo *StoryUpdateOne) AddActivities(a ...*Activity) *StoryUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return suo.AddActivityIDs(ids...)
}

// RemoveProjectIDs removes the project edge to Project by ids.
func (suo *StoryUpdateOne) RemoveProjectIDs(ids ...int) *StoryUpdateOne {
	if suo.removedProject == nil {
		suo.removedProject = make(map[int]struct{})
	}
	for i := range ids {
		suo.removedProject[ids[i]] = struct{}{}
	}
	return suo
}

// RemoveProject removes project edges to Project.
func (suo *StoryUpdateOne) RemoveProject(p ...*Project) *StoryUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return suo.RemoveProjectIDs(ids...)
}

// RemoveSprintIDs removes the sprint edge to Sprint by ids.
func (suo *StoryUpdateOne) RemoveSprintIDs(ids ...int) *StoryUpdateOne {
	if suo.removedSprint == nil {
		suo.removedSprint = make(map[int]struct{})
	}
	for i := range ids {
		suo.removedSprint[ids[i]] = struct{}{}
	}
	return suo
}

// RemoveSprint removes sprint edges to Sprint.
func (suo *StoryUpdateOne) RemoveSprint(s ...*Sprint) *StoryUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return suo.RemoveSprintIDs(ids...)
}

// RemoveActivityIDs removes the activities edge to Activity by ids.
func (suo *StoryUpdateOne) RemoveActivityIDs(ids ...int) *StoryUpdateOne {
	if suo.removedActivities == nil {
		suo.removedActivities = make(map[int]struct{})
	}
	for i := range ids {
		suo.removedActivities[ids[i]] = struct{}{}
	}
	return suo
}

// RemoveActivities removes activities edges to Activity.
func (suo *StoryUpdateOne) RemoveActivities(a ...*Activity) *StoryUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return suo.RemoveActivityIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (suo *StoryUpdateOne) Save(ctx context.Context) (*Story, error) {
	if suo.name != nil {
		if err := story.NameValidator(*suo.name); err != nil {
			return nil, fmt.Errorf("ent: validator failed for field \"name\": %v", err)
		}
	}
	if suo.state != nil {
		if err := story.StateValidator(*suo.state); err != nil {
			return nil, fmt.Errorf("ent: validator failed for field \"state\": %v", err)
		}
	}
	return suo.sqlSave(ctx)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *StoryUpdateOne) SaveX(ctx context.Context) *Story {
	s, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return s
}

// Exec executes the query on the entity.
func (suo *StoryUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *StoryUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (suo *StoryUpdateOne) sqlSave(ctx context.Context) (s *Story, err error) {
	spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   story.Table,
			Columns: story.Columns,
			ID: &sqlgraph.FieldSpec{
				Value:  suo.id,
				Type:   field.TypeInt,
				Column: story.FieldID,
			},
		},
	}
	if value := suo.slug; value != nil {
		spec.Fields.Set = append(spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: story.FieldSlug,
		})
	}
	if value := suo.name; value != nil {
		spec.Fields.Set = append(spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: story.FieldName,
		})
	}
	if value := suo.description; value != nil {
		spec.Fields.Set = append(spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: story.FieldDescription,
		})
	}
	if value := suo.state; value != nil {
		spec.Fields.Set = append(spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  *value,
			Column: story.FieldState,
		})
	}
	if nodes := suo.removedProject; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   story.ProjectTable,
			Columns: story.ProjectPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: project.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		spec.Edges.Clear = append(spec.Edges.Clear, edge)
	}
	if nodes := suo.project; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   story.ProjectTable,
			Columns: story.ProjectPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: project.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		spec.Edges.Add = append(spec.Edges.Add, edge)
	}
	if nodes := suo.removedSprint; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   story.SprintTable,
			Columns: story.SprintPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: sprint.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		spec.Edges.Clear = append(spec.Edges.Clear, edge)
	}
	if nodes := suo.sprint; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   story.SprintTable,
			Columns: story.SprintPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: sprint.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		spec.Edges.Add = append(spec.Edges.Add, edge)
	}
	if nodes := suo.removedActivities; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   story.ActivitiesTable,
			Columns: story.ActivitiesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: activity.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		spec.Edges.Clear = append(spec.Edges.Clear, edge)
	}
	if nodes := suo.activities; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   story.ActivitiesTable,
			Columns: story.ActivitiesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: activity.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		spec.Edges.Add = append(spec.Edges.Add, edge)
	}
	s = &Story{config: suo.config}
	spec.Assign = s.assignValues
	spec.ScanValues = s.scanValues()
	if err = sqlgraph.UpdateNode(ctx, suo.driver, spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return s, nil
}
