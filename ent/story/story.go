// Code generated by entc, DO NOT EDIT.

package story

import (
	"fmt"

	"github.com/satriahrh/winslow/ent/schema"
)

const (
	// Label holds the string label denoting the story type in the database.
	Label = "story"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldSlug holds the string denoting the slug vertex property in the database.
	FieldSlug = "slug"
	// FieldName holds the string denoting the name vertex property in the database.
	FieldName = "name"
	// FieldDescription holds the string denoting the description vertex property in the database.
	FieldDescription = "description"
	// FieldState holds the string denoting the state vertex property in the database.
	FieldState = "state"

	// Table holds the table name of the story in the database.
	Table = "stories"
	// ProjectTable is the table the holds the project relation/edge. The primary key declared below.
	ProjectTable = "project_stories"
	// ProjectInverseTable is the table name for the Project entity.
	// It exists in this package in order to avoid circular dependency with the "project" package.
	ProjectInverseTable = "projects"
	// SprintTable is the table the holds the sprint relation/edge. The primary key declared below.
	SprintTable = "sprint_stories"
	// SprintInverseTable is the table name for the Sprint entity.
	// It exists in this package in order to avoid circular dependency with the "sprint" package.
	SprintInverseTable = "sprints"
	// ActivitiesTable is the table the holds the activities relation/edge. The primary key declared below.
	ActivitiesTable = "story_activities"
	// ActivitiesInverseTable is the table name for the Activity entity.
	// It exists in this package in order to avoid circular dependency with the "activity" package.
	ActivitiesInverseTable = "activities"
)

// Columns holds all SQL columns are story fields.
var Columns = []string{
	FieldID,
	FieldSlug,
	FieldName,
	FieldDescription,
	FieldState,
}

var (
	// ProjectPrimaryKey and ProjectColumn2 are the table columns denoting the
	// primary key for the project relation (M2M).
	ProjectPrimaryKey = []string{"project_id", "story_id"}
	// SprintPrimaryKey and SprintColumn2 are the table columns denoting the
	// primary key for the sprint relation (M2M).
	SprintPrimaryKey = []string{"sprint_id", "story_id"}
	// ActivitiesPrimaryKey and ActivitiesColumn2 are the table columns denoting the
	// primary key for the activities relation (M2M).
	ActivitiesPrimaryKey = []string{"story_id", "activity_id"}
)

var (
	fields = schema.Story{}.Fields()

	// descName is the schema descriptor for name field.
	descName = fields[1].Descriptor()
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator = descName.Validators[0].(func(string) error)
)

// State defines the type for the state enum field.
type State string

const (
	StateCreated    State = "created"
	StateParked     State = "parked"
	StateTodo       State = "todo"
	StateOnProgress State = "on_progress"
	StateOnReview   State = "on_review"
	StateDone       State = "done"
)

func (s State) String() string {
	return string(s)
}

// StateValidator is a validator for the "state" field enum values. It is called by the builders before save.
func StateValidator(state State) error {
	switch state {
	case StateCreated, StateParked, StateTodo, StateOnProgress, StateOnReview, StateDone:
		return nil
	default:
		return fmt.Errorf("story: invalid enum value for state field: %q", state)
	}
}
